{
  "uuid": "a8d82b62-9e87-432b-bc4e-040e01b48f70",
  "text": " Certainly! Here's a README section focusing on Properties:\n\n```markdown\n## Properties\n\n### What is a Property?\n\nIn the context of Notion databases, a property is a field or column that holds specific types of information. Each property has a type that determines what kind of data it can store and how it's displayed. Properties are the building blocks of Notion databases, allowing for structured data organization.\n\nIn this library, a `Property` is an abstract class that serves as the base for all specific property types. It encapsulates common attributes like `name`, `type`, and `id`, as well as a `valueDetails` field to store the actual data.\n\n### Property Variants\n\nThis library supports various property types to match Notion's data model. Here are a couple of examples:\n\n#### Text Property\n\nThe `Text` property corresponds to Notion's \"Text\" and \"Title\" fields. It can store rich text content.\n\n```dart\nfinal textProperty = Text(\n  name: 'Description',\n  type: 'rich_text',\n  valueDetails: Value(value: 'This is a sample description'),\n);\n```\n\n#### Number Property\n\nThe `Number` property represents Notion's \"Number\" field. It can store numeric values.\n\n```dart\nfinal numberProperty = Number(\n  name: 'Price',\n  type: 'number',\n  valueDetails: Value(value: 42.99),\n);\n```\n\n### Creating a New Property Variant\n\nTo create a new property variant:\n\n1. Create a new class that extends `Property<T>`, where `T` is the type of the value.\n2. Implement the required fields and methods, including `toMap()` for serialization.\n\nExample:\n\n```dart\nclass CustomProperty extends Property<String> {\n  CustomProperty({\n    required String name,\n    required String type,\n    Value<String>? valueDetails,\n    String? id,\n  }) : super(name: name, type: type, valueDetails: valueDetails, id: id);\n\n  @override\n  Map<String, Object?> toMap() {\n    return {\n      name: {\n        'custom': value,\n      }\n    };\n  }\n}\n```\n\n### Creating a Property from JSON\n\nProperties are typically created from JSON data received from the Notion API. The `PropertyFactory` class is responsible for creating the appropriate property object based on the type specified in the JSON.\n\nHere's how a property is created from JSON:\n\n```dart\nfinal factory = PropertyFactory();\n\nfinal jsonData = {\n  'MyProperty': {\n    'id': 'prop_id',\n    'type': 'number',\n    'number': 42\n  }\n};\n\nfinal property = factory(jsonData);\nprint(property); // Outputs a Number property instance\n```\n\nThe `PropertyFactory` determines the correct property type and uses the corresponding model class to create the property:\n\n```dart\nclass PropertyFactory {\n  Property call(Map<String, dynamic> map) {\n    final propertyData = map.values.first as Map<String, dynamic>;\n    final type = propertyData['type'] as String;\n\n    switch (type) {\n      case 'number':\n        return NumberModel.fromMap(map);\n      case 'rich_text':\n      case 'title':\n        return TextModel.fromMap(map);\n      // ... other cases\n      default:\n        throw UnsupportedError('Unsupported property type: $type');\n    }\n  }\n}\n```\n\nEach property model class (e.g., `NumberModel`, `TextModel`) has a `fromMap` factory constructor that handles the specifics of parsing the JSON data for that property type.\n```\n\nThis README section provides an overview of what properties are, examples of property variants, instructions on how to create a new variant, and an explanation of how properties are created from JSON data using the `PropertyFactory`. It should give users a good understanding of how to work with properties in your library.",
  "sender": "assistant",
  "index": 9,
  "created_at": "2024-08-02T16:33:20.368139+00:00",
  "updated_at": "2024-08-02T16:33:20.368139+00:00",
  "truncated": false,
  "attachments": [],
  "files": [],
  "parent_message_uuid": "4cc033bc-0a7e-4562-8746-a54c2edbadc0"
}