{
  "uuid": "87e82f19-b023-49e5-8ab6-33f5e4b14daa",
  "text": "```\nimport 'package:core_y/core_y.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:network_y/network_y.dart';\nimport 'package:notion_db_sdk/src/module/data/repository/notion_repository.dart';\nimport 'package:notion_db_sdk/src/module/domain/entity/property.dart';\nimport 'package:notion_db_sdk/src/module/domain/entity/property_variants/date.dart';\nimport 'package:notion_db_sdk/src/module/domain/entity/property_variants/number.dart';\nimport 'package:notion_db_sdk/src/module/domain/entity/property_variants/text.dart';\nimport 'package:notion_db_sdk/src/module/domain/entity/value.dart';\nimport 'package:notion_db_sdk/src/module/domain/repository/notion_repository.dart';\nimport 'package:test/test.dart';\n\nconst _payload = <String, Object?>{\n  'results': [\n    {\n      'properties': {\n        'Description': {\n          'id': 'a%7BUf',\n          'type': 'rich_text',\n          'rich_text': [\n            {\n              'type': 'text',\n              'text': {'content': 'A dark sky', 'link': null},\n              'annotations': {\n                'bold': false,\n                'italic': false,\n                'strikethrough': false,\n                'underline': false,\n                'code': false,\n                'color': 'default'\n              },\n              'plain_text': 'A dark sky',\n              'href': null\n            }\n          ]\n        },\n        'Number': {'id': 'uCG%3A', 'type': 'number', 'number': 42},\n      }\n    },\n    {\n      'properties': {\n        'Number': {'id': 'uCG%3A', 'type': 'number', 'number': 42},\n        'Date': {\n          'id': '%5E%7Cny',\n          'type': 'date',\n          'date': {'start': '2023-02-23', 'end': null, 'time_zone': null}\n        },\n      }\n    }\n  ],\n};\n\nclass MockApiClient extends Mock implements ApiClient {}\n\nclass FakePostRequest extends Fake implements PostRequest {}\n\nvoid main() {\n  late MockApiClient mockApiClient;\n  late NotionRepository repository;\n\n  setUpAll(\n    () {\n      registerFallbackValue(FakePostRequest());\n    },\n  );\n\n  setUp(\n    () {\n      mockApiClient = MockApiClient();\n      repository = NotionRepository(mockApiClient);\n    },\n  );\n\n  group(\n    'NotionRepository',\n    () {\n      test(\n        'return the map of properties when response is successful',\n        () async {\n          const _success =\n              Success<Map<String, Object?>, ApiException>(_payload);\n\n          when(\n            () async => mockApiClient.call<Map<String, Object?>>(any()),\n          ).thenAnswer(\n            (_) async => _success,\n          );\n\n          final _expectedResult = <Map<String, Property<Object?>>>[\n            <String, Property<Object?>>{\n              'Description': const Text(\n                name: 'Description',\n                type: 'rich_text',\n                id: 'a%7BUf',\n                valueDetails: Value(value: 'A dark sky'),\n              ),\n              'Number': const Number(\n                name: 'Number',\n                type: 'number',\n                id: 'uCG%3A',\n                valueDetails: Value(value: 42),\n              ),\n            },\n            {\n              'Number': const Number(\n                name: 'Number',\n                type: 'number',\n                id: 'uCG%3A',\n                valueDetails: Value(value: 42),\n              ),\n              'Date': Date(\n                name: 'Date',\n                type: 'date',\n                id: '%5E%7Cny',\n                valueDetails: Value(\n                  value: DateTime(2023, 2, 23),\n                ),\n              ),\n            },\n          ];\n\n          final _result = await repository.getPageProperties('');\n\n          // expect(_result, isA<Success<Properties, ApiException>>());\n          print('done');\n          // expect(_result.valueOrNull, _expectedResult);\n          print('done again');\n        },\n      );\n    },\n  );\n}\n\n\n```\n\n\n\nAbove test case failing with the following error\n\n```\ntype 'Null' is not a subtype of type 'Future<Result<Map<String, Object?>, ApiException>>'\ntest/src/module/data/repository/notion_repository_test.dart 53:7   MockApiClient.call\nnotion_repository_test.dart:53\ntest/src/module/data/repository/notion_repository_test.dart 84:39  main.<fn>.<fn>.<fn>\nnotion_repository_test.dart:84\npackage:mocktail/src/mocktail.dart 211:9                           when.<fn>\ntest/src/module/data/repository/notion_repository_test.dart 83:15  main.<fn>.<fn>\n```\n\n\n\nThe expect statements are running fine. What might be causing it?",
  "sender": "human",
  "index": 0,
  "created_at": "2024-08-03T07:28:36.356615+00:00",
  "updated_at": "2024-08-03T07:28:36.356615+00:00",
  "truncated": false,
  "attachments": [],
  "files": [],
  "parent_message_uuid": "00000000-0000-4000-8000-000000000000"
}