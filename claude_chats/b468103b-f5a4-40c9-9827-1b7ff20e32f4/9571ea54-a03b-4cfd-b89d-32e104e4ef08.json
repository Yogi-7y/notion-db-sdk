{
  "uuid": "9571ea54-a03b-4cfd-b89d-32e104e4ef08",
  "text": " Certainly! I'll create a class that can take in JSON and return the appropriate property type for a Notion database. This class will be written in Dart, which is suitable for Flutter development and can be easily adapted for other platforms if needed. Here's a class that accomplishes this:\n\n```dart\nimport 'package:meta/meta.dart';\n\n@immutable\nclass NotionPropertyType {\n  final String type;\n  final dynamic value;\n\n  const NotionPropertyType({required this.type, required this.value});\n\n  factory NotionPropertyType.fromJson(Map<String, dynamic> json) {\n    final type = json.keys.first;\n    final value = json[type];\n\n    switch (type) {\n      case 'title':\n      case 'rich_text':\n        return NotionPropertyType(type: type, value: _parseRichText(value));\n      case 'number':\n        return NotionPropertyType(type: type, value: value);\n      case 'select':\n        return NotionPropertyType(type: type, value: value['name']);\n      case 'multi_select':\n        return NotionPropertyType(type: type, value: (value as List).map((item) => item['name']).toList());\n      case 'date':\n        return NotionPropertyType(type: type, value: DateTime.parse(value['start']));\n      case 'people':\n        return NotionPropertyType(type: type, value: (value as List).map((user) => user['id']).toList());\n      case 'files':\n        return NotionPropertyType(type: type, value: (value as List).map((file) => file['name']).toList());\n      case 'checkbox':\n        return NotionPropertyType(type: type, value: value);\n      case 'url':\n      case 'email':\n      case 'phone_number':\n        return NotionPropertyType(type: type, value: value);\n      case 'formula':\n        return NotionPropertyType(type: type, value: _parseFormulaResult(value));\n      case 'relation':\n        return NotionPropertyType(type: type, value: (value as List).map((relation) => relation['id']).toList());\n      case 'rollup':\n        return NotionPropertyType(type: type, value: _parseRollupResult(value));\n      case 'created_time':\n      case 'last_edited_time':\n        return NotionPropertyType(type: type, value: DateTime.parse(value));\n      case 'created_by':\n      case 'last_edited_by':\n        return NotionPropertyType(type: type, value: value['id']);\n      default:\n        throw ArgumentError('Unsupported property type: $type');\n    }\n  }\n\n  static String _parseRichText(List<dynamic> richTextList) {\n    return richTextList.map((item) => item['plain_text']).join();\n  }\n\n  static dynamic _parseFormulaResult(Map<String, dynamic> formula) {\n    final type = formula['type'];\n    return formula[type];\n  }\n\n  static dynamic _parseRollupResult(Map<String, dynamic> rollup) {\n    final type = rollup['type'];\n    return rollup[type];\n  }\n\n  @override\n  String toString() => 'NotionPropertyType(type: $type, value: $value)';\n}\n```\n\nThis class provides the following features:\n\n1. It uses a factory constructor `fromJson` to parse the JSON input and return the appropriate `NotionPropertyType` instance.\n\n2. It handles all the property types mentioned in the Notion API documentation, including title, rich_text, number, select, multi_select, date, people, files, checkbox, url, email, phone_number, formula, relation, rollup, created_time, last_edited_time, created_by, and last_edited_by.\n\n3. It parses complex types like rich_text, formula, and rollup to extract the relevant information.\n\n4. It uses the `@immutable` annotation to ensure that instances of this class are immutable, which is a good practice for data objects.\n\n5. It provides a custom `toString` method for easy debugging and logging.\n\nTo use this class, you can do the following:\n\n```dart\nvoid main() {\n  final json = {\n    'title': [\n      {'type': 'text', 'text': {'content': 'Sample Title'}, 'plain_text': 'Sample Title'}\n    ]\n  };\n\n  final propertyType = NotionPropertyType.fromJson(json);\n  print(propertyType); // NotionPropertyType(type: title, value: Sample Title)\n}\n```\n\nThis class provides a clean and type-safe way to handle Notion property types in your Flutter application. It can be easily integrated into a larger system for managing Notion database interactions.",
  "sender": "assistant",
  "index": 1,
  "created_at": "2024-08-02T16:09:26.407407+00:00",
  "updated_at": "2024-08-02T16:09:26.407407+00:00",
  "truncated": false,
  "attachments": [],
  "files": [],
  "parent_message_uuid": "fc37973a-136b-4641-a937-64c03b7bade5"
}